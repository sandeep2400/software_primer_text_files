Git Primer
- Git is distributed VCS  which means that all programmers have the entire repository. 
- Advantages of a distributed VCS:
	a) make commis quickly
	b) Work on it offline
	c) everybody has a copy. 

- Originial GIT repo: git-scm.com

- For all help: 
	$ git help  OR
	$ git help config

- Basic configuration: 
$git config --global user.name "Sandeep Gopal"
$git config --global user.email "gopal.sandeep@gmail.com"
$git config --global color.ui true
$git init - create a git repository. 

TYPICAL GIT Workflow: 
	(1) Do a little bit of work on a file
	(2) Stage the file
	(3) Commit the file (by taking a snapshot of the file)

	Create a file --> this is untracked file. 
	Add file to a staging area. 
	Commit

COMMANDS: 
$git status	--> check what's changed since the last commit. (inspec the current directory)
$git log -->  show all files (operate only on the committed history)
	Difference between git status and 
	git log -n <limit> : scrollable git log
	git log --oneline
	git log --stat
	git log --author="<pattern>"
	git log <since>..<until>	

$git add <filename> - adds a file to the staging area
	git add <list of files>
	git add -all <all files>
	git add *.txt <all text files>
	git add docs/*.txt <all text files within docs folder>
	git add docs/   Add all files in the docs directory. 

GIT COMMIT
$git commit -m "<message for the commit.>"
- Usually we ADD, then COMMIT a file, but now, a shortcut is to add and commit using the 
$git commit -a -m "modify readme"

REgreting a  a commit --> use 
(*)	$git reset --soft HEAD^ {reset the code in the staging area to the last commit before the HEAD - or latest commit}
(*) $git reset --hard HEAD^ {hard reset - blow away the last commit}
(*) $git reset --hard HEAD^^ {hard reset - blow away the last TWO commit}


FOrgot to add a file to commit --> use 
(*)	$git add <filename>
	$it commit --amend -m "<commi message>"

GIT DOES NOT Take care of access control for you. You have to do that yourself. 

	
_______________________________________________________________
GIT CHECKOUT
$git checkout lets you do these: 
	(1) Check out files (lets you see the old verion of that file )
	(2) Check out commits: checking a commit makes the entire working directory match that commit. (can be used ot view an old state of your project w/o altering the current state in anuy way)
	(3) Check out check out branches

 *	$git checkout master 
			--> way of getting back to the current state of the project
 *	$git checkout <commit> <file> 
			--> checks out the previous version of a file. This will turn the <file> that resides in the working directory into an exact copy of the one from <commit>
 *	$git checkout <commit>
			--> updates all the files int he working directory to mathc the specificed commit. 

	TO list all prior commits run this command, 
	$git log --online  -- 	pick a commit to checkout from that commit. 		


GIT REVERT
	$git revert 
		- Undoes a committed snapshot not by deleting the said commit, but by removing the commit and adding a new commit w/o the earlier changes. 

		[1] -> [2] -> [3]  			{reverting commit 2}
		[1] -> [2] -> [3] ->[3-2]	{added a new commit w/o the existing commit} 



$git reset - dangerous way to unde changes to the project. 
		- Reset is a permanent undo.
	*	$git reset <file> 
		--> remove the specificed file from the staging area. 
	
	*	$git reset --hard
		--> reset the staging area and the working directoy to match the most recent commit. this obliterates all uncommited changes
	
	*	$git reset <commit> 
			--> Move the current branch tip backward to <commit>, reset the staging area to match, but leave the working directory alone. All changes made since <commit> will reside in the working directory, which lets you re-commit the project history using cleaner, more atomic snapshots.
*** Never reset public history. it will be like a huge chunk of code just dispappered. Use REVERT when you need to remove the code changes. 


$git clean -- { remove untracked files from the working repo}

-------------- GIT BRANCHES ----------------------
GIT branches, unlike SVN branches, are an integral part of your everyday workflow. 
- BRANCHES represent an independent line of development
- each branch is a brand new working directory, staging area and project history 
- When you want to add a new feature, however big or small, you add a branch. This ensures the main codebase is always secure. 
- Unlike SVN, GIT merges do not happen on a file level, but on the more abstract layer of commits. 

	$git BRANCH
				- GIT branch lets you create, list, rename and delete branches. It doesn't let you switch between branches or put a forked history back toegther. Tha		
		$git branch 
					--> lists all the branches in a repository. 
		$git branch <branchname> 
					--> create a new repository called branchname
		$git branch -d <branch> 
					--> delete the branch. does not delete a branch if it has unmerged changes. 
		$git branch -D <branch>
					--> force delete the specified branch. this permanently throws away changes (evern unmerged changes) to your branches. 

		$git branch -m <branch> 
			--> rename the current branch to <branch>	


	$git CHECKOUT
		- When you want to start a new feature, you create a new branch, and then checkout the master code into the latest branch with git checkout. 
		- lets you navigate between the branches created by GIT BRANCH. Checking out a branch updates the files in the working directory to match the version stored in that branch. and it tells GIT to record all new commits on that branch. 

		$git checkout <exisitng branch-name> - checks out said branch. 
		
		$git checkout -b <new branch> - creates and checks out new branch. 

		$git checkout - b <new-branch> <existing branch> - Same as the above invocation, but base the new branch off of <existing-branch> instead of the current branch.

		
	$git MERGE
			Merging is Git's way of putting a forked history back together again. The git merge command lets you take the independent lines of development created by git branch and integrate them into a single branch.

		git merge <branch>: 
				Merge the specified branch into the current branch. Git will determine the merge algorithm automatically (discussed below).

		git merge --no-ff <branch>		
			Merge the specified branch into the current branch, but always generate a merge commit (even if it was a fast-forward merge). This is useful for documenting all merges that occur in your repository.

		RESOLVING conflicts: If the two branches you're trying to merge both changed the same part of the same file, Git won't be able to figure out which version to use. When such a situation occurs, it stops right before the merge commit so that you can resolve the conflicts manually.
---------------------------------------------------------------
REMOTE repositories: 


$git remote